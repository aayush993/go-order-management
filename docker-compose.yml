version: "3.9"

services:
  # Create service with RabbitMQ.
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - 5672:5672 # for send and receive connections
      - 15672:15672 # for serve RabbitMQ GUI
    volumes:
      - ${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq
      - ${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq
    restart: always
    networks:
      - dev-network

  # Create service postgresql.
  database:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tucowstores
      POSTGRES_DB: postgres
    volumes:
      - ${HOME}/dev-postgresql/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: always
    networks:
      - dev-network

  # Create service oms.
  oms:
    container_name: order-mgmt-svc
    ports:
      - 3000:3000
    build:
      context: .
      dockerfile: order-management-service/Dockerfile-oms
    environment:
      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tucowstores
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres-db
      PORT: 3000
      EXCHANGE_NAME: orders_exchange
      SEND_ROUTING_KEY: processingorders
      RECEIVE_ROUTING_KEY: processedorders
      restart: always
    networks:
      - dev-network
    depends_on:
      - message-broker
      - database

  # Create service pps.
  pps:
    container_name: payment-processing-svc
    build:
      context: .
      dockerfile: payment-processing-service/Dockerfile-pps
    environment:
      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/
      EXCHANGE_NAME: orders_exchange
      RECEIVE_ROUTING_KEY: processingorders
      SEND_ROUTING_KEY: processedorders
    restart: always
    networks:
      - dev-network
    depends_on:
      - message-broker

networks:
  # Create a new Docker network.
  dev-network:
    driver: bridge
